"math" use

{
	c_b def c_a def
	0 i def
	0 dup z_a def z_b def
	{
		# complex multiplication: z = z^2 + c
		z_a . dup * z_b . dup * -  c_a . + # z_a
		z_a . z_b . 2.0 * *        c_b . + # z_b
		z_b def z_a def
	} { i . 1 + dup i def 50 < } while
	# absolute value
	z_a . z_b . hypot : return
} 2 function mandelbrot globaldef

{
	a def b def
	"%f + %fi" a . b . fmt'2 : return
} 2 function printComplex globaldef

{
1 y def
{
	-2 x def
	{
		x . y . mandelbrot : z def
		switch::
		{ "." write }
		{ z . 10000 < }
		{ "*" write }
		{ z . 2 < }
		{ "#" write }
		{ z . 0.03 < }
		{ " " write }
		switch		
	} { x . 0.0215 + dup x def 0.5 <= } while
	"" writeln
} { y . 0.05 - dup y def -1 >= } while

} 0 function main globaldef

main export
mandelbrot export
printComplex export

main :
